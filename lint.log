cmd/gophermart/flags.go:15:2: runAddress is a global variable (gochecknoglobals)
	runAddress          string        // Адрес и порт для запуска сервера
	^
cmd/gophermart/flags.go:16:2: databaseURI is a global variable (gochecknoglobals)
	databaseURI         string        // URI базы данных
	^
cmd/gophermart/flags.go:17:2: accrualSystemAddr is a global variable (gochecknoglobals)
	accrualSystemAddr   string        // Адрес системы расчета начислений
	^
cmd/gophermart/flags.go:18:2: migrationsDirectory is a global variable (gochecknoglobals)
	migrationsDirectory string        // Директория с миграциями
	^
cmd/gophermart/flags.go:19:2: jwtSecret is a global variable (gochecknoglobals)
	jwtSecret           string        // Секретный ключ для подписи JWT токенов
	^
cmd/gophermart/flags.go:20:2: jwtExpirationPeriod is a global variable (gochecknoglobals)
	jwtExpirationPeriod time.Duration // Период действия JWT токена
	^
cmd/gophermart/main.go:22:2: envFileLoaded is a global variable (gochecknoglobals)
	envFileLoaded bool
	^
cmd/gophermart/main.go:25:1: don't use `init` function (gochecknoinits)
func init() {
^
cmd/gophermart/main.go:78:3: exitAfterDefer: os.Exit will exit, and `defer cancel()` will not run (gocritic)
		os.Exit(1)
		^
cmd/gophermart/main.go:84:6: shadow: declaration of "err" shadows declaration at line 68 (govet)
		if err := application.Start(runAddress); err != nil && !errors.Is(err, http.ErrServerClosed) {
		   ^
cmd/gophermart/main.go:92:7: shadow: declaration of "err" shadows declaration at line 68 (govet)
	case err := <-serverErr:
	     ^
cmd/gophermart/main.go:103:5: shadow: declaration of "err" shadows declaration at line 68 (govet)
	if err := application.Shutdown(shutdownCtx); err != nil {
	   ^
cmd/gophermart/main.go:100:75: Magic number: 10, in <argument> detected (mnd)
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 10*time.Second)
	                                                                         ^
cmd/gophermart/logging.go:42:15: Magic number: 4, in <condition> detected (mnd)
	if len(s) <= 4 {
	             ^
internal/domain/balance.go:5:1: Comment should end in a period (godot)
// Balance представляет баланс пользователя
^
internal/domain/balance.go:11:1: Comment should end in a period (godot)
// Withdrawal представляет списание средств
^
internal/domain/balance.go:19:1: Comment should end in a period (godot)
// WithdrawalRequest представляет запрос на списание средств
^
internal/domain/balance.go:25:1: Comment should end in a period (godot)
// BalanceRepository определяет интерфейс для работы с балансом
^
internal/domain/balance.go:32:1: Comment should end in a period (godot)
// BalanceService определяет интерфейс для бизнес-логики работы с балансом
^
internal/domain/errors.go:6:2: Comment should end in a period (godot)
	// ErrInvalidOrderNumber ошибка неверный номер заказа
	^
internal/domain/order.go:9:1: Comment should end in a period (godot)
// OrderStatus представляет статус обработки заказа
^
internal/domain/order.go:13:2: Comment should end in a period (godot)
	// OrderStatusNew заказ загружен в систему, но не попал в обработку
	^
internal/domain/order.go:15:2: Comment should end in a period (godot)
	// OrderStatusProcessing вознаграждение за заказ рассчитывается
	^
internal/domain/order.go:17:2: Comment should end in a period (godot)
	// OrderStatusInvalid система расчета вознаграждений отказала в расчете
	^
internal/domain/order.go:19:2: Comment should end in a period (godot)
	// OrderStatusProcessed данные по заказу проверены и информация о расчете успешно получена
	^
internal/domain/order.go:23:1: Comment should end in a period (godot)
// Value реализует интерфейс driver.Valuer для OrderStatus
^
internal/domain/order.go:28:1: Comment should end in a period (godot)
// Scan реализует интерфейс sql.Scanner для OrderStatus
^
internal/domain/order.go:42:1: Comment should end in a period (godot)
// Order представляет заказ в системе
^
internal/domain/order.go:53:1: Comment should end in a period (godot)
// SetAccrual устанавливает сумму начисления в копейках и автоматически обновляет сумму в рублях
^
internal/domain/order.go:59:1: Comment should end in a period (godot)
// CalculateAccrualRub вычисляет сумму в рублях на основе суммы в копейках
^
internal/domain/order.go:67:1: Comment should end in a period (godot)
// GetAccrualRub возвращает сумму начисленных баллов в рублях
^
internal/domain/order.go:75:1: Comment should end in a period (godot)
// OrderRepository определяет интерфейс для доступа к данным заказов
^
internal/domain/order.go:91:1: Comment should end in a period (godot)
// OrderService определяет интерфейс для бизнес-логики работы с заказами
^
internal/domain/order.go:99:1: Comment should end in a period (godot)
// OrderRequest представляет данные запроса на регистрацию заказа
^
internal/domain/user.go:7:1: Comment should end in a period (godot)
// User представляет пользователя в системе
^
internal/domain/user.go:16:1: Comment should end in a period (godot)
// AuthToken представляет данные авторизационного токена
^
internal/domain/user.go:21:1: Comment should end in a period (godot)
// UserRepository определяет интерфейс для доступа к данным пользователей
^
internal/domain/user.go:27:1: Comment should end in a period (godot)
// UserService определяет интерфейс для бизнес-логики работы с пользователями
^
internal/domain/user.go:33:1: Comment should end in a period (godot)
// RegisterRequest представляет данные запроса на регистрацию
^
internal/domain/order.go:62:39: Magic number: 100, in <operation> detected (mnd)
		accrualRub := float64(*o.Accrual) / 100
		                                    ^
internal/domain/order.go:72:31: Magic number: 100.0, in <return> detected (mnd)
	return float64(*o.Accrual) / 100.0
	                             ^
internal/utils/luhn.go:3:1: Comment should end in a period (godot)
// ValidateLuhn проверяет номер заказа по алгоритму Луна
^
internal/utils/luhn.go:14:11: Magic number: 9, in <condition> detected (mnd)
			if d > 9 {
			       ^
internal/service/accrual.go:54:6: shadow: declaration of "err" shadows declaration at line 40 (govet)
		if err := json.NewDecoder(resp.Body).Decode(&accrual); err != nil {
		   ^
internal/service/accrual.go:62:13: shadow: declaration of "err" shadows declaration at line 40 (govet)
			seconds, err := time.ParseDuration(retryAfter + "s")
			         ^
internal/service/user.go:69:5: shadow: declaration of "err" shadows declaration at line 49 (govet)
	if err := s.repo.Create(user); err != nil {
	   ^
internal/service/user.go:87:5: shadow: declaration of "err" shadows declaration at line 79 (govet)
	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(password)); err != nil {
	   ^
internal/service/errors.go:17:1: The line is 129 characters long, which exceeds the maximum of 120 characters. (lll)
	// ErrOrderRegisteredByOther возникает при попытке зарегистрировать заказ, который уже был зарегистрирован другим пользователем.
^
internal/service/errors.go:20:1: The line is 139 characters long, which exceeds the maximum of 120 characters. (lll)
	ErrInvalidOrderNumber = errors.New("неверный формат номера заказа, номер заказа должен состоять из 10 цифр и проходить по алгоритму Луна")
^
internal/service/balance.go:60:30: Magic number: 100, in <argument> detected (mnd)
		AmountKop: int64(req.Sum * 100),
		                           ^
internal/service/accrual.go:30:13: Magic number: 10, in <assign> detected (mnd)
			Timeout: 10 * time.Second,
			         ^
internal/service/accrual.go:67:43: Magic number: 60, in <assign> detected (mnd)
		return nil, &RateLimitError{RetryAfter: 60 * time.Second} // По умолчанию ждем 60 секунд
		                                        ^
internal/service/accrual.go:69:3: return both a `nil` error and an invalid value: use a sentinel error instead (nilnil)
		return nil, nil
		^
internal/app/middleware.go:49:25: Error return value is not checked (errcheck)
			c.Set("user_id", int(claims["user_id"].(float64)))
			                     ^
internal/app/middleware.go:50:19: Error return value is not checked (errcheck)
			c.Set("login", claims["login"].(string))
			               ^
internal/app/database.go:8:2: Comment should end in a period (godot)
	// Импортируем драйвер pgx для работы с PostgreSQL через database/sql
	^
internal/app/database.go:33:5: shadow: declaration of "err" shadows declaration at line 22 (govet)
	if err := db.PingContext(ctx); err != nil {
	   ^
internal/handlers/user.go:47:3: switch on an error will fail on wrapped errors. Use errors.Is to check for specific errors (errorlint)
		case service.ErrUserExists:
		^
internal/handlers/user.go:90:3: switch on an error will fail on wrapped errors. Use errors.Is to check for specific errors (errorlint)
		case service.ErrInvalidLogin:
		^
internal/handlers/balance.go:48:1: Comment should end in a period (godot)
// Withdraw обрабатывает запрос на списание средств
^
internal/handlers/balance.go:79:1: Comment should end in a period (godot)
// GetWithdrawals возвращает историю списаний пользователя
^
internal/handlers/order.go:16:1: Comment should end in a period (godot)
// OrderHandler обрабатывает HTTP-запросы, связанные с заказами
^
internal/handlers/order.go:21:1: Comment should end in a period (godot)
// NewOrderHandler создает новый экземпляр OrderHandler
^
internal/handlers/order.go:26:1: Comment should end in a period (godot)
// Register обрабатывает загрузку номера заказа
^
internal/handlers/order.go:83:1: Comment should end in a period (godot)
// GetOrders возвращает список заказов пользователя
^
internal/handlers/user.go:12:1: Comment should end in a period (godot)
// UserHandler обрабатывает HTTP-запросы, связанные с пользователями
^
internal/handlers/user.go:17:1: Comment should end in a period (godot)
// NewUserHandler создает новый экземпляр UserHandler
^
internal/handlers/user.go:22:1: Comment should end in a period (godot)
// Register обрабатывает регистрацию пользователя
^
internal/handlers/user.go:59:1: Comment should end in a period (godot)
// LoginRequest представляет данные запроса на вход
^
internal/handlers/user.go:65:1: Comment should end in a period (godot)
// Authenticate обрабатывает аутентификацию пользователя
^
internal/handlers/order.go:85:1: The line is 125 characters long, which exceeds the maximum of 120 characters. (lll)
// @Description Возвращает список загруженных пользователем номеров заказов, статусов их обработки и информации о начислениях
^
internal/repository/balance.go:11:1: Comment should end in a period (godot)
// BalanceRepo реализует интерфейс domain.BalanceRepository
^
internal/repository/balance.go:17:1: Comment should end in a period (godot)
// NewBalanceRepo создает новый экземпляр BalanceRepo
^
internal/repository/balance.go:28:1: Comment should end in a period (godot)
// GetBalance возвращает текущий баланс пользователя
^
internal/repository/balance.go:55:1: Comment should end in a period (godot)
// CreateWithdrawal создает новую запись о списании средств
^
internal/repository/balance.go:70:1: Comment should end in a period (godot)
// GetWithdrawals возвращает историю списаний пользователя
^
internal/repository/order.go:12:1: Comment should end in a period (godot)
// OrderRepo реализует интерфейс domain.OrderRepository
^
internal/repository/order.go:18:1: Comment should end in a period (godot)
// NewOrderRepo создает новый экземпляр OrderRepo
^
internal/repository/order.go:29:1: Comment should end in a period (godot)
// Create создает новый заказ
^
internal/repository/order.go:44:1: Comment should end in a period (godot)
// FindByNumber ищет заказ по номеру
^
internal/repository/order.go:55:1: Comment should end in a period (godot)
// FindByUserID возвращает все заказы пользователя
^
internal/repository/order.go:69:1: Comment should end in a period (godot)
// UpdateStatus обновляет статус заказа
^
internal/repository/order.go:79:1: Comment should end in a period (godot)
// UpdateAccrual обновляет сумму начисленных баллов за заказ
^
internal/repository/balance.go:85:60: Magic number: 100.0, in <operation> detected (mnd)
		withdrawals[i].Sum = float64(withdrawals[i].AmountKop) / 100.0
		                                                         ^
internal/worker/accrual.go:149:27: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
			if rateLimitErr, ok := err.(*service.RateLimitError); ok {
			                       ^
internal/worker/accrual.go:146:12: shadow: declaration of "err" shadows declaration at line 123 (govet)
		accrual, err := w.accrualService.GetOrderAccrual(ctx, order.Number)
		         ^
internal/worker/accrual.go:175:6: shadow: declaration of "err" shadows declaration at line 146 (govet)
		if err := w.orderRepo.UpdateStatus(order.ID, accrual.Status); err != nil {
		   ^
internal/worker/accrual.go:191:7: shadow: declaration of "err" shadows declaration at line 146 (govet)
			if err := w.orderRepo.UpdateAccrual(order.ID, accrualKop); err != nil {
			   ^
internal/worker/accrual.go:72:2: for loop can be changed to use an integer range (Go 1.22+) (intrange)
	for i := 0; i < w.workerCount; i++ {
	^
internal/worker/accrual.go:185:43: Magic number: 100, in <argument> detected (mnd)
			accrualKop := int64(*accrual.Accrual * 100) // конвертируем рубли в копейки
			                                       ^
90 issues:
* errcheck: 2
* errorlint: 3
* gochecknoglobals: 7
* gochecknoinits: 1
* gocritic: 1
* godot: 50
* govet: 11
* intrange: 1
* lll: 3
* mnd: 10
* nilnil: 1
